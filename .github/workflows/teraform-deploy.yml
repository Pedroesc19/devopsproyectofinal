name: Terraform Deploy

on:
  push:
    branches: ["main"]
    paths:
      - "infra/**"
      - ".github/workflows/terraform-deploy.yml"
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      AWS_REGION: ${{ vars.AWS_REGION || 'us-east-1' }}
      TF_VAR_region: ${{ vars.AWS_REGION || 'us-east-1' }}
      TF_IN_AUTOMATION: true
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        if: vars.AWS_ROLE_TO_ASSUME != ''
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Configure AWS (Access Keys fallback)
        if: vars.AWS_ROLE_TO_ASSUME == ''
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: Terraform Init
        working-directory: infra
        run: terraform init -input=false

      - name: Terraform Apply
        working-directory: infra
        env:
          TF_VAR_project_name: ${{ vars.PROJECT_NAME || 'demo-devops' }}
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_db_name: ${{ vars.DB_NAME || 'appdb' }}
          TF_VAR_image_uri: ${{ vars.IMAGE_URI_DEFAULT }}
          TF_VAR_enable_github_oidc: ${{ vars.ENABLE_GITHUB_OIDC || 'false' }}
          TF_VAR_github_repo: ${{ github.repository }}
          TF_VAR_aws_account_id: ${{ vars.AWS_ACCOUNT_ID }}
        run: terraform apply -auto-approve -input=false
